// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// spModelAll
Rcpp::NumericVector spModelAll(Rcpp::NumericVector xvec, const Rcpp::NumericVector y1, const Rcpp::NumericVector y2, Rcpp::NumericVector delta1, Rcpp::NumericVector delta2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericMatrix x3, Rcpp::NumericVector wts, Rcpp::NumericMatrix m1pred, Rcpp::NumericMatrix m2pred, Rcpp::NumericMatrix m3pred, bool penalty, Rcpp::NumericMatrix penaltyMat1, Rcpp::NumericMatrix penaltyMat2, Rcpp::NumericMatrix penaltyMat3, double kappa1, double kappa2, double kappa3);
RcppExport SEXP _FreqIDSpline_spModelAll(SEXP xvecSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP x3SEXP, SEXP wtsSEXP, SEXP m1predSEXP, SEXP m2predSEXP, SEXP m3predSEXP, SEXP penaltySEXP, SEXP penaltyMat1SEXP, SEXP penaltyMat2SEXP, SEXP penaltyMat3SEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP kappa3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x3(x3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1pred(m1predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m2pred(m2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m3pred(m3predSEXP);
    Rcpp::traits::input_parameter< bool >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type penaltyMat1(penaltyMat1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type penaltyMat2(penaltyMat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type penaltyMat3(penaltyMat3SEXP);
    Rcpp::traits::input_parameter< double >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa3(kappa3SEXP);
    rcpp_result_gen = Rcpp::wrap(spModelAll(xvec, y1, y2, delta1, delta2, x1, x2, x3, wts, m1pred, m2pred, m3pred, penalty, penaltyMat1, penaltyMat2, penaltyMat3, kappa1, kappa2, kappa3));
    return rcpp_result_gen;
END_RCPP
}
// sandwichEstCheese
Rcpp::NumericMatrix sandwichEstCheese(Rcpp::NumericVector xvec, const Rcpp::NumericVector y1, const Rcpp::NumericVector y2, Rcpp::NumericVector delta1, Rcpp::NumericVector delta2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericMatrix x3, Rcpp::NumericVector wts, Rcpp::NumericMatrix m1pred, Rcpp::NumericMatrix m2pred, Rcpp::NumericMatrix m3pred);
RcppExport SEXP _FreqIDSpline_sandwichEstCheese(SEXP xvecSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP x3SEXP, SEXP wtsSEXP, SEXP m1predSEXP, SEXP m2predSEXP, SEXP m3predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x3(x3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1pred(m1predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m2pred(m2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m3pred(m3predSEXP);
    rcpp_result_gen = Rcpp::wrap(sandwichEstCheese(xvec, y1, y2, delta1, delta2, x1, x2, x3, wts, m1pred, m2pred, m3pred));
    return rcpp_result_gen;
END_RCPP
}
// logLikNoPenal
double logLikNoPenal(Rcpp::NumericVector xvec, const Rcpp::NumericVector y1, const Rcpp::NumericVector y2, Rcpp::NumericVector delta1, Rcpp::NumericVector delta2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericMatrix x3, Rcpp::NumericVector wts, Rcpp::NumericMatrix m1pred, Rcpp::NumericMatrix m2pred, Rcpp::NumericMatrix m3pred);
RcppExport SEXP _FreqIDSpline_logLikNoPenal(SEXP xvecSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP x3SEXP, SEXP wtsSEXP, SEXP m1predSEXP, SEXP m2predSEXP, SEXP m3predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x3(x3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1pred(m1predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m2pred(m2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m3pred(m3predSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikNoPenal(xvec, y1, y2, delta1, delta2, x1, x2, x3, wts, m1pred, m2pred, m3pred));
    return rcpp_result_gen;
END_RCPP
}
// logLikPenal
double logLikPenal(Rcpp::NumericVector xvec, const Rcpp::NumericVector y1, const Rcpp::NumericVector y2, Rcpp::NumericVector delta1, Rcpp::NumericVector delta2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericMatrix x3, Rcpp::NumericVector wts, Rcpp::NumericMatrix m1pred, Rcpp::NumericMatrix m2pred, Rcpp::NumericMatrix m3pred, Rcpp::NumericMatrix m1deriv2pred, Rcpp::NumericMatrix m2deriv2pred, Rcpp::NumericMatrix m3deriv2pred, double kappa1, double kappa2, double kappa3);
RcppExport SEXP _FreqIDSpline_logLikPenal(SEXP xvecSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP x3SEXP, SEXP wtsSEXP, SEXP m1predSEXP, SEXP m2predSEXP, SEXP m3predSEXP, SEXP m1deriv2predSEXP, SEXP m2deriv2predSEXP, SEXP m3deriv2predSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP kappa3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x3(x3SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1pred(m1predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m2pred(m2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m3pred(m3predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1deriv2pred(m1deriv2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m2deriv2pred(m2deriv2predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m3deriv2pred(m3deriv2predSEXP);
    Rcpp::traits::input_parameter< double >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< double >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa3(kappa3SEXP);
    rcpp_result_gen = Rcpp::wrap(logLikPenal(xvec, y1, y2, delta1, delta2, x1, x2, x3, wts, m1pred, m2pred, m3pred, m1deriv2pred, m2deriv2pred, m3deriv2pred, kappa1, kappa2, kappa3));
    return rcpp_result_gen;
END_RCPP
}
// spModelUniv
Rcpp::NumericVector spModelUniv(Rcpp::NumericVector xvec, int nObs, int nCov, int nKnots, const Rcpp::NumericVector y, Rcpp::NumericVector delta, Rcpp::NumericMatrix x1, Rcpp::NumericVector wts, Rcpp::NumericMatrix bpred);
RcppExport SEXP _FreqIDSpline_spModelUniv(SEXP xvecSEXP, SEXP nObsSEXP, SEXP nCovSEXP, SEXP nKnotsSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP x1SEXP, SEXP wtsSEXP, SEXP bpredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);
    Rcpp::traits::input_parameter< int >::type nCov(nCovSEXP);
    Rcpp::traits::input_parameter< int >::type nKnots(nKnotsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bpred(bpredSEXP);
    rcpp_result_gen = Rcpp::wrap(spModelUniv(xvec, nObs, nCov, nKnots, y, delta, x1, wts, bpred));
    return rcpp_result_gen;
END_RCPP
}
// spModelUnivFixedBeta
Rcpp::NumericVector spModelUnivFixedBeta(Rcpp::NumericVector xvec, Rcpp::NumericVector beta, int nObs, int nCov, int nKnots, const Rcpp::NumericVector y, Rcpp::NumericVector delta, Rcpp::NumericMatrix x1, Rcpp::NumericVector wts, Rcpp::NumericMatrix bpred);
RcppExport SEXP _FreqIDSpline_spModelUnivFixedBeta(SEXP xvecSEXP, SEXP betaSEXP, SEXP nObsSEXP, SEXP nCovSEXP, SEXP nKnotsSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP x1SEXP, SEXP wtsSEXP, SEXP bpredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xvec(xvecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);
    Rcpp::traits::input_parameter< int >::type nCov(nCovSEXP);
    Rcpp::traits::input_parameter< int >::type nKnots(nKnotsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type wts(wtsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bpred(bpredSEXP);
    rcpp_result_gen = Rcpp::wrap(spModelUnivFixedBeta(xvec, beta, nObs, nCov, nKnots, y, delta, x1, wts, bpred));
    return rcpp_result_gen;
END_RCPP
}
// spModelExample
Rcpp::NumericVector spModelExample(Rcpp::NumericVector params, Rcpp::NumericVector xInterp, Rcpp::NumericVector yInterp, const Rcpp::NumericVector xVals, int nObs);
RcppExport SEXP _FreqIDSpline_spModelExample(SEXP paramsSEXP, SEXP xInterpSEXP, SEXP yInterpSEXP, SEXP xValsSEXP, SEXP nObsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xInterp(xInterpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yInterp(yInterpSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type xVals(xValsSEXP);
    Rcpp::traits::input_parameter< int >::type nObs(nObsSEXP);
    rcpp_result_gen = Rcpp::wrap(spModelExample(params, xInterp, yInterp, xVals, nObs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FreqIDSpline_spModelAll", (DL_FUNC) &_FreqIDSpline_spModelAll, 19},
    {"_FreqIDSpline_sandwichEstCheese", (DL_FUNC) &_FreqIDSpline_sandwichEstCheese, 12},
    {"_FreqIDSpline_logLikNoPenal", (DL_FUNC) &_FreqIDSpline_logLikNoPenal, 12},
    {"_FreqIDSpline_logLikPenal", (DL_FUNC) &_FreqIDSpline_logLikPenal, 18},
    {"_FreqIDSpline_spModelUniv", (DL_FUNC) &_FreqIDSpline_spModelUniv, 9},
    {"_FreqIDSpline_spModelUnivFixedBeta", (DL_FUNC) &_FreqIDSpline_spModelUnivFixedBeta, 10},
    {"_FreqIDSpline_spModelExample", (DL_FUNC) &_FreqIDSpline_spModelExample, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_FreqIDSpline(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
